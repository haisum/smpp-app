{
    "swagger": "2.0",
    "info": {
        "description": "This is API documentation for SMS gateway.",
        "version": "1.0.0",
        "title": "SMS Gateway",
        "contact": {
            "email": "haisumbhatti@gmail.com"
        }
    },
    "host": "",
    "basePath": "/api",
    "tags": [{
        "name": "sms",
        "description": "Sending single sms and filter sent messages."
    }, {
        "name": "campaign",
        "description": "Stop/Retry/Start and get reports about campaigns."
    },{
        "name": "files",
        "description": "Operations about uploading and managing files."
    }, {
        "name": "reports",
        "description": "Reports about all entities in app."
    }, {
        "name": "users",
        "description": "Operations related to users."
    }, {
        "name": "services",
        "description": "Operations about smpp connections and app status."
    }],
    "schemes": ["https"],
    "paths": {
        "/message": {
            "post": {
                "tags": ["sms"],
                "summary": "Send a new sms.",
                "description": "This endpoint sends a single sms to specified number. To successfully send a message, in addition to relevant sms parameters, you also need to pass a valid authentication token, obtained from /user/auth endpoint.<br/><br/> User of given token must have \"Send message\" permission. If Mask is set to true, user must also have \"Mask Messages\" permission.<br/><br/> When message contains non latin characters, it's sent with UCS data coding. By default we use raw sms encoding. Messages larger than 140 bytes (70 chars in UCS, 160 latin) are automatically splitted in multiple sms. <br/><br/> Connection is chosen for a message based on user's ConnectionGroup setting and prefix of destination number. See user and services endpoints for details about connection settings.",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "Message request object that contains necessary parameters.",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Message"
                    }
                }],
                "responses": {
                    "200": {
                      "description" : "Request completed successfully",
                      "schema": {
                        "$ref": "#/definitions/MessageResponse"
                      }
                    },
                    "400": {
                        "description": "Bad request. Occurs, when we submit json/form request with wrong input type or format.",
                        "schema": {
                          "$ref": "#/definitions/BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. This error happens when either token is invalid, user no longer exists or user is suspended.",
                        "schema": {
                          "$ref": "#/definitions/MessageResponse"
                        }
                    },
                    "403": {
                        "description": "This error occurs when user is trying to perform an action that they don't have permission to perform.",
                        "schema": {
                          "$ref": "#/definitions/MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                }
            }
        },
        "/message/filter" : {
          "get" : {
            "tags" : ["sms", "reports"],
            "summary" : "Fetches reports about sent sms from database.",
            "description" : "This endpoint queries Message table and fetches records based on filters and order provided. User must have \"List messages\" permission to use this endpoint.<br/><br/> Be cautious when using this endpoint, a very broad criteria may load a lot of records in memory and cause issues in database. Filter criterias which act on more than 100,000 records are not supported. You can split such reports in multiple smaller units.",
            "consumes": ["application/json"],
            "produces": ["application/json"],
            "parameters": [{
                "in": "body",
                "name": "body",
                "description": "Message filter request object that contains necessary parameters.",
                "required": true,
                "schema": {
                    "$ref": "#/definitions/MessageFilter"
                }
            }],
            "responses": {
                "200": {
                  "description" : "Request completed successfully",
                  "schema": {
                    "$ref": "#/definitions/MessageFilterResponse"
                  }
                },
                "400": {
                    "description": "Bad request. Occurs, when we submit json/form request with wrong input type or format.",
                    "schema": {
                      "$ref": "#/definitions/BadRequestResponse"
                    }
                },
                "401": {
                    "description": "Unauthorized. This error happens when either token is invalid, user no longer exists or user is suspended.",
                    "schema": {
                      "$ref": "#/definitions/MessageFilterResponse"
                    }
                },
                "403": {
                    "description": "This error occurs when user is trying to perform an action that they don't have permission to perform.",
                    "schema": {
                      "$ref": "#/definitions/MessageFilterResponse"
                    }
                },
                "500": {
                    "description": "Internal server error."
                }
            }
          }
        },
        "/campaign": {
            "post": {
                "tags": ["campaign"],
                "summary": "Starts a new campaign.",
                "description": "Starts a new campaign using provided csv or excel file or a list of comma separated numbers. Dynamic, variable based templates are supported via excel file. See /file endpoint for file specific information. A user must have \"Start a campaign\" permission to perform this action.",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "Campaign request object that contains necessary parameters.",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Campaign"
                    }
                }],
                "responses": {
                    "200": {
                      "description" : "Request completed successfully",
                      "schema": {
                        "$ref": "#/definitions/CampaignResponse"
                      }
                    },
                    "400": {
                        "description": "Bad request. Occurs, when we submit json/form request with wrong input type or format.",
                        "schema": {
                          "$ref": "#/definitions/BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. This error happens when either token is invalid, user no longer exists or user is suspended.",
                        "schema": {
                          "$ref": "#/definitions/CampaignResponse"
                        }
                    },
                    "403": {
                        "description": "This error occurs when user is trying to perform an action that they don't have permission to perform.",
                        "schema": {
                          "$ref": "#/definitions/CampaignResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                }
            }
        },
        "/campaign/filter" : {
          "get":{
            "tags" : ["campaign", "reports"],
            "summary" : "",
            "description" : "",
            "consumes": ["application/json"],
            "produces": ["application/json"]
          }
        },
        "/campaign/retry" : {
          "post":{
            "tags" : ["campaign"],
            "summary" : "",
            "description" : "",
            "consumes": ["application/json"],
            "produces": ["application/json"]
          }
        },
        "/campaign/stop" :{
          "post":{
            "tags" : ["campaign"],
            "summary" : "",
            "description" : "",
            "consumes": ["application/json"],
            "produces": ["application/json"]
          }
        },
        "/campaign/report" :{
          "get":{
            "tags" : ["campaign", "reports"],
            "summary" : "",
            "description" : "",
            "consumes": ["application/json"],
            "produces": ["application/json"]
          }
        },
        "/users" :{
          "get":{
            "tags" : ["users", "reports"],
            "summary" : "",
            "description" : "",
            "consumes": ["application/json"],
            "produces": ["application/json"]
          }
        },
        "/users/permissions" :{
          "get":{
            "tags" : ["users", "reports"],
            "summary" : "",
            "description" : "",
            "consumes": ["application/json"],
            "produces": ["application/json"]
          }
        },
        "/users/add" :{
          "post":{
            "tags" : ["users", "reports"],
            "summary" : "",
            "description" : "",
            "consumes": ["application/json"],
            "produces": ["application/json"]
          }
        },
        "/users/edit" :{
          "post":{
            "tags" : ["users", "reports"],
            "summary" : "",
            "description" : "",
            "consumes": ["application/json"],
            "produces": ["application/json"]
          }
        },
        "/user/auth" :{
          "post":{
            "tags" : ["users"],
            "summary" : "",
            "description" : "",
            "consumes": ["application/json"],
            "produces": ["application/json"]
          }
        },
        "/user/edit" :{
          "post":{
            "tags" : ["users"],
            "summary" : "",
            "description" : "",
            "consumes": ["application/json"],
            "produces": ["application/json"]
          }
        },
        "/user/info" :{
          "get":{
            "tags" : ["users"],
            "summary" : "",
            "description" : "",
            "consumes": ["application/json"],
            "produces": ["application/json"]
          }
        },
        "/services/config" :{
          "post":{
            "tags" : ["services"],
            "summary" : "",
            "description" : "",
            "consumes": ["application/json"],
            "produces": ["application/json"]
          },
          "get":{
            "tags" : ["services"],
            "summary" : "",
            "description" : "",
            "consumes": ["application/json"],
            "produces": ["application/json"]
          }
        },
        "/services/status" :{
          "get":{
            "tags" : ["services"],
            "summary" : "",
            "description" : "",
            "consumes": ["application/json"],
            "produces": ["application/json"]
          }
        },
        "/file/upload" :{
          "post":{
            "tags" : ["files"],
            "summary" : "Upload and save files with list of numbers to use in campaign.",
            "description" : "When uploading csv, make sure each number is at least 5 characters long, otherwise an error will be returned.<br/><br/>Excel files should have a sheet with \"Destination\" written at A1 as first column. Headers in B1, C1... should be dynamic placeholders you want to use when sending campaign. Numbers and parameter values should be placed row 2 onwards.<br/><br/>As an example, one can set first row as Destination,Parameter1,Parameter2,Parameter3 and second row as 0239349,value1,value2,value3. When sending campaign we can use placeholders in sms text. Example message using parameters in this excel file will be \"Hello {{Parameter1}}, welcome to {{Parameter2}}. You are our {{Parameter3}} customer.\"<br/><br/>Files larger than 5MB are not supported and return 417 Expectation Failed header.",
            "consumes": ["multipart/form-data"],
            "produces": ["application/json"],
            "parameters" : [
              {
                "name": "File",
                "in" : "formData",
                "description" : "XLSX or CSV File to upload.",
                "required" : true,
                "type" : "file"
              },
              {
                "name": "Description",
                "in" : "formData",
                "description" : "Description of file.",
                "type" : "string"
              },
              {
                "name": "Token",
                "in" : "formData",
                "description" : "Authentication token.",
                "type" : "string",
                "required" : true
              }
            ],
            "responses": {
                "200": {
                  "description" : "Request completed successfully",
                  "schema": {
                    "$ref": "#/definitions/FileUploadResponse"
                  }
                },
                "400": {
                    "description": "Bad request. Occurs, when we submit json/form request with wrong input type or format.",
                    "schema": {
                      "$ref": "#/definitions/BadRequestResponse"
                    }
                },
                "401": {
                    "description": "Unauthorized. This error happens when either token is invalid, user no longer exists or user is suspended.",
                    "schema": {
                      "$ref": "#/definitions/FileUploadResponse"
                    }
                },
                "417": {
                    "description": "This error occurs when size of file plus post request is larger than 5MB.",
                    "schema": {
                      "$ref": "#/definitions/BadRequestResponse"
                    }
                },
                "500": {
                    "description": "Internal server error."
                }
            }
          }
        },
        "/file/filter" :{
          "get":{
            "tags" : ["files"],
            "summary" : "Filters files based on given criteria",
            "description" : "This endpoint lists recently uploaded files and allows user to search for uploaded files based on given criteria. A user may search their own files by passing Username=myusername. Filtering other user's files requires \"List number files\" permission.",
            "consumes": ["application/json"],
            "produces": ["application/json"],
            "parameters": [{
                "in": "body",
                "name": "body",
                "description": "File filter request object that contains necessary parameters.",
                "required": true,
                "schema": {
                    "$ref": "#/definitions/FileFilterRequest"
                }
            }],
            "responses": {
                "200": {
                  "description" : "Request completed successfully",
                  "schema": {
                    "$ref": "#/definitions/FileFilterResponse"
                  }
                },
                "400": {
                    "description": "Bad request. Occurs, when we submit json/form request with wrong input type or format.",
                    "schema": {
                      "$ref": "#/definitions/BadRequestResponse"
                    }
                },
                "401": {
                    "description": "Unauthorized. This error happens when either token is invalid, user no longer exists or user is suspended.",
                    "schema": {
                      "$ref": "#/definitions/FileFilterResponse"
                    }
                },
                "403": {
                    "description": "This error occurs when user is trying to perform an action that they don't have permission to perform.",
                    "schema": {
                      "$ref": "#/definitions/FileFilterResponse"
                    }
                },
                "500": {
                    "description": "Internal server error."
                }
            }
          }
        },
        "/file/delete" :{
          "post":{
            "tags" : ["files"],
            "summary" : "Marks an uploaded file as deleted.",
            "description" : "This endpoint sets Deleted field of file object to true so it won't be fetched by default. Note that this doesn't delete actual file from file system.<br/><br/>A user must have \"Delete a number file\" permission if they want to mark a file that's not uploaded by them as deleted.",
            "consumes": ["application/json"],
            "produces": ["application/json"],
            "parameters": [{
                "in": "body",
                "name": "body",
                "description": "ID of the file to delete and auth token.",
                "required": true,
                "schema": {
                    "$ref": "#/definitions/FileDeleteRequest"
                }
            }],
            "responses": {
                "200": {
                  "description" : "Request completed successfully",
                  "schema": {
                    "$ref": "#/definitions/FileDeleteResponse"
                  }
                },
                "400": {
                    "description": "Bad request. Occurs, when we submit json/form request with wrong input type or format.",
                    "schema": {
                      "$ref": "#/definitions/BadRequestResponse"
                    }
                },
                "401": {
                    "description": "Unauthorized. This error happens when either token is invalid, user no longer exists or user is suspended.",
                    "schema": {
                      "$ref": "#/definitions/FileDeleteResponse"
                    }
                },
                "403": {
                    "description": "This error occurs when user is trying to perform an action that they don't have permission to perform.",
                    "schema": {
                      "$ref": "#/definitions/FileDeleteResponse"
                    }
                },
                "500": {
                    "description": "Internal server error."
                }
            }
          }
        }
    },
    "definitions": {
        "ScheduledAt": {
            "type": "integer",
            "format": "int64",
            "description": "Unix UTC timestamp at which this message should be sent."
        },
        "Token": {
          "type": "string",
          "example": "kODrTQZrwfkHESKqZTwXhkhIlAucHxPkODrTQZrw",
          "description" : "Token obtained after authentication"
        },
        "Src": {
          "type": "string",
          "example": "AADC009",
          "description": "Source from which message should be sent. This is also called short code by some operators."
        },
        "Msg": {
          "type": "string",
          "description": "Message text. When message contains non latin characters, it's sent with UCS data coding. By default we use raw sms encoding. Messages larger than 140 bytes (70 chars in UCS, 160 latin) are automatically splitted in multiple sms.",
          "example": "Hello this is test message."
        },
        "Dst": {
          "type": "string",
          "example": "023994334",
          "description": "Destination number where message should be sent."
        },
        "SendBefore": {
          "type": "string",
          "description": "Hour and minute of the day before which all messages should be sent. Should be in 24 hour format HH:MM. All messages after this time are scheduled for one minute after next SendAfter time.",
          "example": "19:00"
        },
        "SendAfter": {
          "type": "string",
          "description": "Hour and minute of the day after which all messages should be sent. Should be in 24 hour format HH:MM.",
          "example": "07:00"
        },
        "Mask": {
          "type": "boolean",
          "default": false,
          "description": "When set to true, all values in sms enclosed in two square brackets [[]] are masked. User must have masking permissions to do this."
        },
        "ConnectionGroup" : {
          "type" : "string",
          "description" : "Connection groups are a way to organize operator connections into groups. SMS sent by user with connection group A will only be able to use operator connections in group A. This can be used to achieve multi tenancy in our application.",
          "default" : "Default"
        },
        "OrderByKey" : {
          "type" : "string",
          "description" : "By default, returned records are sorted by QueuedAt. You can override this behaviour by passing desired field name here."
        },
        "OrderByDir" : {
          "type" : "string",
          "description" : "Whether order by should be in descending or ascending order.",
          "enum" : ["ASC", "DESC"],
          "default" : "DESC"
        },
        "From" : {
          "type" : "string",
          "description" : "This parameter is provided to help in pagination. It filters and returns records in field defined in OrderByKey greater than value set in this parameter. If direction is DESC, all records lesser than value defined in From are returned."
        },
        "PerPage" : {
          "type" : "integer",
          "default" : 100,
          "description" : "Maximum number of records to return. This shouldn't exceed 100000."
        },
        "Message": {
            "type": "object",
            "required": ["Token", "Src", "Dst", "Msg"],
            "properties": {
                "ScheduledAt" : {
                  "$ref": "#/definitions/ScheduledAt"
                },
                "Token": {
                  "$ref": "#/definitions/Token"
                },
                "Src": {
                  "$ref": "#/definitions/Src"
                },
                "Dst": {
                  "$ref": "#/definitions/Dst"
                },
                "Msg": {
                  "$ref": "#/definitions/Msg"
                },
                "SendBefore": {
                  "$ref": "#/definitions/SendBefore"
                },
                "SendAfter": {
                  "$ref": "#/definitions/SendAfter"
                },
                "Mask": {
                  "$ref": "#/definitions/Mask"
                }
            }
        },
        "MessageFilter" : {
          "type": "object",
          "required": ["Token"],
          "properties" : {
            "Token": {
              "$ref": "#/definitions/Token"
            },
            "ReportCols" : {
              "type" : "string",
              "description": "Comma separated list of columns you want to be inside Excel report. By default all available columns are printed in excel report. If you want to reduce them or change order, you can define a custom list via this parameter. Available columns are: \"ID,Connection,ConnectionGroup,Status,Error,RespID,Total,Username,Msg,Enc,Dst,Src,CampaignID,Campaign,Priority,QueuedAt,SentAt,DeliveredAt,ScheduledAt,SendBefore,SendAfter\""
            },
            "XLSX" : {
              "type" : "boolean",
              "default" : false,
              "description" : "When set to true, an excel file is generated and made available for download instead of returning a json response."
            },
            "Stats": {
              "type" : "boolean",
              "default" : false,
              "description" : "When set to true, stats are generated and made available in response's Stats object. This is costly query therefore is disabled by default."
            },
            "TZ" : {
              "type" : "string",
              "description" : "Excel reports contain UTC time by default, if you want to generated report to contain time in other time zones, you can pass valid IANA TZ database location. A list of possible TZ names is available at https://en.wikipedia.org/wiki/List_of_tz_database_time_zones in TZ column.",
              "example" : "America/New_York"
            },
            "RespID" : {
              "type" : "string",
              "description" : "When SubmitSM pdu is submitted to operator, it acknowledges and returns an ID that we can use later to check delivery status etc. RespID is ID returned by operator for a sms."
            },
            "ConnectionGroup" : {
              "$ref" : "#/definitions/ConnectionGroup"
            },
            "Connection" : {
              "type" : "string",
              "description" : "Connection is string name of connection used for sending this message."
            },
            "Username" : {
              "type" : "string",
              "description" : "Name of user who sent this message."
            },
            "Enc" : {
              "type" : "string",
              "description" : "Encoding used to send this message.",
              "enum" : ["ucs", "latin"]
            },
            "Src" : {
              "$ref" : "#/definitions/Src"
            },
            "Dst" : {
              "$ref" : "#/definitions/Dst"
            },
            "Msg" : {
              "$ref" : "#/definitions/Msg"
            },
            "QueuedBefore" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Time in UTC Unix timestamp before which messages were queued."
            },
            "QueuedAfter" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Time in UTC Unix timestamp after which messages were queued."
            },
            "SentBefore" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Time in UTC Unix timestamp before which messages were sent."
            },
            "SentAfter" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Time in UTC Unix timestamp after which messages were sent."
            },
            "DeliveredBefore" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Time in UTC Unix timestamp before which messages were delivered."
            },
            "DeliveredAfter" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Time in UTC Unix timestamp after which messages were delivered."
            },
            "Total" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "When a message text exceeds 140 bits we split it automatically in multiple sms, total defines how many parts this sms was split into."
            },
            "Priority" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Ranges between 0-10. Higher priority messages take priority over other messages and bypass otherwise first come first serve queue."
            },
            "CampaignID" : {
              "type" : "string",
              "description" : "If you want all messages inside a campaign, you can pass campaignID of said campaign here. You can get campaignIDs by using /campaign/filter endpoint."
            },
            "Status" : {
              "type" : "string",
              "enum" : ["Queued", "Sent", "Error", "Delivered", "Not Delivered", "Scheduled", "Stopped"],
              "description" : "Current status of this sms. Queued sms are saved in database and passed to rabbitmq queues. Sent sms are passed to operator. Error status means operator returned error when sending this message. Delivered means operator returned a successful delivery report for this sms. Not Delivered means operator returns failed delivery report. Scheduled means sms is scheduled for some later time. Stopped means sms was part of campaign stopped by using /campaign/stop endpoint."
            },
            "Error" : {
              "type" : "string",
              "description": "Contains textual error message returned from operator when an error occurred when sending this sms."
            },
            "ScheduledAfer" : {
              "type" : "string",
              "description" : "Time in UTC Unix timestamp after which messages are scheduled."
            },
            "ScheduledBefore" : {
              "type" : "string",
              "description" : "Time in UTC Unix timestamp before which messages were scheduled."
            },
            "OrderByKey" : {
              "$ref" : "#/definitions/OrderByKey"
            },
            "OrderByDir" : {
              "$ref" : "#/definitions/OrderByDir"
            },
            "From" : {
              "$ref" : "#/definitions/From"
            },
            "PerPage" : {
              "$ref" : "#/definitions/PerPage"
            },
            "DisableOrder" : {
              "type" : "boolean",
              "default" : false,
              "description" : "If for performance gains, you don't care about order of records you can set this to true, to disable order by."
            }
          }
        },
        "MessageStats" : {
          "type": "object",
          "properties" : {
            "Queued" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Number of records with status set as Queueud."
            },
            "Sent" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Number of records  with status set as Sent."
            },
            "Error" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Number of records  with status set as Error."
            },
            "Delivered" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Number of records  with status set as Delivered."
            },
            "NotDelivered" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Number of records  with status set as NotDelivered."
            },
            "Scheduled" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Number of records  with status set as Scheduled."
            },
            "Stopped" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Number of records  with status set as Stopped."
            },
            "Total" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "Total number of records matching given criteria."
            }
          }
        },
        "NumFile" : {
          "type": "object",
          "properties" : {
            "ID" : {
              "type" : "string",
              "description": "ID of uploaded file."
            },
            "Username" : {
              "type" : "string",
              "description": "Username of user that uploaded file."
            },
            "UserID" : {
              "type" : "string",
              "description": "UserID of user that uploaded file"
            },
            "SubmittedAt" : {
              "type" : "integer",
              "format" : "int64",
              "description": "UTC Unix timestamp at which file was uploaded."
            },
            "Type" : {
              "type" : "string",
              "description": "Extension of uploaded file.",
              "enum" : [".csv", ".txt", ".xlsx"]
            },
            "Name" : {
              "type" : "string",
              "description": "Name of the uploaded file"
            },
            "LocalName" : {
              "type" : "string",
              "description": "Name by which file is saved in local file system."
            },
            "Description" : {
              "type" : "string",
              "description": "File description provided by uploader."
            },
            "Deleted" : {
              "type" : "boolean",
              "description": "When calling /file/delete endpoint, this flag is set to true. By default deleted files don't appear but if you want to look for deleted files, set this flag to true."
            }
          }
        },
        "FileFilterRequest" : {
          "type": "object",
          "properties" : {
            "Token" : {
              "$ref" : "#/definitions/Token"
            },
            "ID" : {
              "type" : "string",
              "description": "ID of uploaded file."
            },
            "Username" : {
              "type" : "string",
              "description": "Username of user that uploaded file."
            },
            "UserID" : {
              "type" : "string",
              "description": "UserID of user that uploaded file"
            },
            "SubmittedAfter" : {
              "type" : "integer",
              "format" : "int64",
              "description": "UTC Unix timestamp after which file was uploaded."
            },
            "SubmittedBefore" : {
              "type" : "integer",
              "format" : "int64",
              "description": "UTC Unix timestamp before which file was uploaded."
            },
            "Type" : {
              "type" : "string",
              "description": "Extension of uploaded file.",
              "enum" : [".csv", ".txt", ".xlsx"]
            },
            "Name" : {
              "type" : "string",
              "description": "Name of the uploaded file"
            },
            "Deleted" : {
              "type" : "boolean",
              "description": "When calling /file/delete endpoint, this flag is set to true. By default deleted files don't appear but if you want to look for deleted files, set this flag to true."
            },
            "OrderByKey" : {
              "$ref" : "#/definitions/OrderByKey"
            },
            "OrderByDir" : {
              "$ref" : "#/definitions/OrderByDir"
            },
            "From" : {
              "$ref" : "#/definitions/From"
            },
            "PerPage" : {
              "$ref" : "#/definitions/PerPage"
            }
          }
        },
        "FileDeleteRequest" : {
          "type": "object",
          "properties" : {
            "Token" : {
              "$ref" : "#/definitions/Token"
            },
            "ID" : {
              "type" : "string",
              "description": "ID of file to mark as deleted."
            }
          }
        },
        "ResponseError" : {
          "type": "object",
          "properties": {
            "Message" : {
              "type": "string",
              "description": "Summary of error."
            },
            "Type" : {
              "type": "string",
              "description": "Type of error. This classifies errors in 6 types. When error type is form, user may use additional info in Field to find which field caused this error.",
              "enum" : ["form","db","request","auth","config","queue"]
            },
            "Field" : {
              "type": "string",
              "description": "Populated when Type is set to form. If Msg field had errors in request, Type will be set to form and this will be set to Msg."
            }
          }
        },
        "Response": {
            "type": "object",
            "properties": {
                "Errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResponseError"
                    }
                },
                "Ok": {
                    "type": "boolean",
                    "description": "Set to true when request is successful otherwise false.",
                    "default": false
                }
            }
        },
        "BadRequestResponse": {
          "required": ["Errors", "Ok"],
          "allOf":[
            { "$ref": "#/definitions/Response" },
            { "properties": {
                "Response": {
                    "type": "object"
                },
                "Request": {
                    "type": "object"
                }
              }
            }
          ]
        },
        "MessageResponse":{
          "required": ["Errors", "Ok", "Request", "Response"],
          "allOf":[
            { "$ref": "#/definitions/Response" },
            { "properties": {
                "Response": {
                    "type": "object",
                    "properties" : {
                      "ID" :{
                        "type": "string"
                      }
                    }
                },
                "Request": {
                  "$ref": "#/definitions/Message"
                }
              }
            }
          ]
        },
        "MessageFilterResponse":{
          "required": ["Errors", "Ok", "Request", "Response"],
          "allOf":[
            { "$ref": "#/definitions/Response" },
            { "properties": {
                "Response": {
                    "type": "object",
                    "properties" : {
                      "Messages" :{
                        "type": "array",
                        "items" : {
                          "$ref" : "#/definitions/Message"
                        }
                      },
                      "Stats" : {
                        "$ref" : "#/definitions/MessageStats"
                      }
                    }
                },
                "Request": {
                  "$ref": "#/definitions/MessageFilter"
                }
              }
            }
          ]
        },
        "FileFilterResponse":{
          "required": ["Errors", "Ok", "Request", "Response"],
          "allOf":[
            { "$ref": "#/definitions/Response" },
            { "properties": {
                "Response": {
                    "type": "object",
                    "properties" : {
                      "NumFiles" :{
                        "type": "array",
                        "items" : {
                          "$ref" : "#/definitions/NumFile"
                        }
                      }
                    }
                },
                "Request": {
                  "$ref": "#/definitions/FileFilterRequest"
                }
              }
            }
          ]
        },
        "FileUploadResponse":{
          "required": ["Errors", "Ok", "Request", "Response"],
          "allOf":[
            { "$ref": "#/definitions/Response" },
            { "properties": {
                "Response": {
                    "type": "object",
                    "properties" : {
                      "ID" :{
                        "type": "string",
                        "required" : "true",
                        "description": "ID of the file we just submitted."
                      }
                    }
                },
                "Request": {
                  "type": "object",
                  "properties" : {
                    "Description" : {
                      "description" : "Description of file.",
                      "type" : "string"
                    },
                    "Token" : {
                      "description" : "Authentication token.",
                      "type" : "string"
                    },
                    "URL" : {
                      "description" : "URL used to access this resource.",
                      "type" : "string"
                    }
                  }
                }
              }
            }
          ]
        },
        "FileDeleteResponse":{
          "required": ["Errors", "Ok", "Request", "Response"],
          "allOf":[
            { "$ref": "#/definitions/Response" },
            { "properties": {
                "Response": {
                    "type": "object"
                },
                "Request": {
                  "$ref" : "#/definitions/FileDeleteRequest"
                }
              }
            }
          ]
        }
    }
}
